{"version":3,"sources":["script.js"],"names":["GAME_SPEED","CANVAS_BORDER_COLOUR","CANVAS_BACKGROUND_COLOUR","SNAKE_COLOUR","SNAKE_HEAD_BORDER_COLOUR","FOOD_COLOUR","FOOD_BORDER_COLOUR","gameCanvas","document","getElementById","ctx","getContext","snake","body","x","y","food","score","changingDirection","dx","dy","operator","randomTen","min","max","Math","round","random","didGameEnd","i","length","hitLeftWall","hitRightWall","width","hitToptWall","hitBottomWall","height","createFood","forEach","isFoodOnSnake","part","foodIsOnSnake","advanceSnake","head","unshift","didEatFood","innerHTML","pop","changeDirection","event","LEFT_KEY","RIGHT_KEY","UP_KEY","DOWN_KEY","keyPressed","keyCode","goingUp","goingDown","goingRight","goingLeft","view","clearCanvas","fillStyle","strokestyle","fillRect","strokeRect","drawFood","drawSnake","drawSnakePart","snakePart","indexOf","main","setTimeout","addEventListener","code","key","undefined","keyIdentifier"],"mappings":"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","file":"script.355e08d7.map","sourceRoot":"..","sourcesContent":["const GAME_SPEED = 100;\nconst CANVAS_BORDER_COLOUR = '#000';\nconst CANVAS_BACKGROUND_COLOUR = \"#fff\";\nconst SNAKE_COLOUR = '#98FB98';\nconst SNAKE_HEAD_BORDER_COLOUR = '#006400';\n/*  Ferrari red ;-) */\nconst FOOD_COLOUR = '#ff2800';\nconst FOOD_BORDER_COLOUR = '#8b0000';\n\n// Get the canvas element\nconst gameCanvas = document.getElementById(\"gameCanvas\");\nconst ctx = gameCanvas.getContext(\"2d\");\n\nconst snake = {\n  body: [\n    { x: 150, y: 150 },\n    { x: 140, y: 150 },\n    { x: 130, y: 150 },\n    { x: 120, y: 150 },\n    { x: 110, y: 150 },\n  ],\n};\n\nconst food = {\n  x: 0,\n  y: 0,\n};\n\nlet score = 0;\nlet changingDirection = false;\n\n// Horizontal velocity\nlet dx = 10;\nlet dy = 0;\n\nconst operator = {\n  randomTen(min, max) {\n    return Math.round((Math.random() * (max - min) + min) / 10) * 10;\n  },\n  didGameEnd() {\n    for (let i = 4; i < snake.body.length; i++) {\n      if (snake.body[i].x === snake.body[0].x && snake.body[i].y === snake.body[0].y) return true\n    }\n    const hitLeftWall = snake.body[0].x < 0;\n    const hitRightWall = snake.body[0].x > gameCanvas.width - 10;\n    const hitToptWall = snake.body[0].y < 0;\n    const hitBottomWall = snake.body[0].y > gameCanvas.height - 10;\n    return hitLeftWall || hitRightWall || hitToptWall || hitBottomWall\n  },\n  createFood() {\n    // Generate a random number the food x-coordinate and food y coordinate\n    food.x = this.randomTen(0, gameCanvas.width - 10);\n    food.y = this.randomTen(0, gameCanvas.height - 10);\n    // if the new food location is where the snake currently is, generate a new food location\n    snake.body.forEach(function isFoodOnSnake(part) {\n      const foodIsOnSnake = part.x === food.x && part.y === food.y;\n      if (foodIsOnSnake) operator.createFood();\n    });\n  },\n  advanceSnake() {\n    // Create the new Snake's head\n    const head = { x: snake.body[0].x + dx, y: snake.body[0].y + dy };\n    // Add the new head to the beginning of snake body\n    snake.body.unshift(head);\n    const didEatFood = snake.body[0].x === food.x && snake.body[0].y === food.y;\n    if (didEatFood) {\n      // Increase score\n      score += 10;\n      // Display score on screen\n      document.getElementById('score').innerHTML = score;\n      // Generate new food location\n      operator.createFood();\n    } else {\n      // Remove the last part of snake body\n      snake.body.pop();\n    }\n  },\n  changeDirection(event) {\n    const LEFT_KEY = 37;\n    const RIGHT_KEY = 39;\n    const UP_KEY = 38;\n    const DOWN_KEY = 40;\n    if (changingDirection) return;\n    changingDirection = true;\n\n    const keyPressed = event.keyCode;\n    const goingUp = dy === -10;\n    const goingDown = dy === 10;\n    const goingRight = dx === 10;\n    const goingLeft = dx === -10;\n    if (keyPressed === LEFT_KEY && !goingRight) {\n      dx = -10;\n      dy = 0;\n    }\n\n    if (keyPressed === UP_KEY && !goingDown) {\n      dx = 0;\n      dy = -10;\n    }\n\n    if (keyPressed === RIGHT_KEY && !goingLeft) {\n      dx = 10;\n      dy = 0;\n    }\n\n    if (keyPressed === DOWN_KEY && !goingUp) {\n      dx = 0;\n      dy = 10;\n    }\n  },\n};\n\nconst view = {\n  clearCanvas() {\n    //  Select the colour to fill the drawing\n    ctx.fillStyle = CANVAS_BACKGROUND_COLOUR;\n    //  Select the colour for the border of the canvas\n    ctx.strokestyle = CANVAS_BORDER_COLOUR;\n    // Draw a \"filled\" rectangle to cover the entire canvas\n    ctx.fillRect(0, 0, gameCanvas.width, gameCanvas.height);\n    // Draw a \"border\" around the entire canvas\n    ctx.strokeRect(0, 0, gameCanvas.width, gameCanvas.height);\n  },\n  drawFood() {\n    ctx.fillStyle = FOOD_COLOUR;\n    ctx.strokestyle = FOOD_BORDER_COLOUR;\n    ctx.fillRect(food.x, food.y, 10, 10);\n    ctx.strokeRect(food.x, food.y, 10, 10);\n  },\n  drawSnake() {\n    // loop through the snake parts drawing each part on the canvas\n    snake.body.forEach(this.drawSnakePart)\n  },\n  drawSnakePart(snakePart) {\n    // Set the colour of the snake part\n    ctx.fillStyle = snake.body.indexOf(snakePart) === 0 ? SNAKE_HEAD_BORDER_COLOUR : SNAKE_COLOUR;\n    // Set the border colour of the snake part\n    ctx.strokestyle = SNAKE_HEAD_BORDER_COLOUR;\n    // Draw a \"filled\" rectangle to represent the snake part at the coordinates\n    // the part is located\n    ctx.fillRect(snakePart.x, snakePart.y, 10, 10);\n    // Draw a border around the snake part\n    ctx.strokeRect(snakePart.x, snakePart.y, 10, 10);\n  },\n  main() {\n    // If the game ended return early to stop game\n    if (operator.didGameEnd()) return;\n    setTimeout(() => {\n      changingDirection = false;\n      this.clearCanvas();\n      this.drawFood();\n      operator.advanceSnake();\n      this.drawSnake();\n      // Call game again\n      this.main();\n    }, GAME_SPEED)\n  },\n};\n\n\nview.clearCanvas();\noperator.createFood();\nview.drawFood();\n// Create the first food location\nview.drawSnake();\n\n// Call changeDirection whenever a key is pressed\ndocument.addEventListener(\"keydown\", operator.changeDirection);\n\ndocument.addEventListener(\"keyup\", (event) => {\n  let code;\n\n  if (event.key !== undefined) {\n    code = event.key;\n  } else if (event.keyIdentifier !== undefined) {\n    code = event.keyIdentifier;\n  } else if (event.keyCode !== undefined) {\n    code = event.keyCode;\n  }\n  code === 13 || code === 'Enter' ? view.main() : 0\n});\n"]}